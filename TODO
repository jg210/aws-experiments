* Internal server error
  - https://stackoverflow.com/questions/51686903/badrequest-on-aws-api-gateway-method-settings-logging-level
  - enabling cloudwatch for API gateway
    - "Execution failed due to configuration error: Invalid permissions on Lambda function"
      - maybe https://github.com/hashicorp/terraform-provider-aws/issues/9972?
      -   source_arn = "${aws_api_gateway_rest_api.api.execution_arn}/*/*" has just "/*" in https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission

* Turn off detailed cloudwatch logging for API gateway.

* Configure cloudwatch retention.

* Replace EC2 with something that's less hassle and more modern.

* Add pip constraints file.

* bash completion for packer.

* Move commands from README.md to ~/bin/setup

* EBS snapshots were building up.
  - what was creating them?
  - create snapshot lifecycle policy?

* Try out terraform registry modules for lambda functions etc.
  - https://registry.terraform.io/modules/howdio/lambda/aws/0.2.1
  - https://registry.terraform.io/modules/techjacker/lambda-api-gateway/aws/1.0.2

* http to https redirection for API gateway.
  - would need cloudfront?
    - https://stackoverflow.com/a/47373353

* Automated staged deployment.
  - packer validate every commit
  - automated daily rebuilds
    - with testing before deployed.
  - tag packer EC2 instances etc.
  - automatically delete old packer-related resources in periodic job.

* Circular dependency between packer and terraform.
  - artifacts.tf defines role that is required by packer
    => split terraform into pre- and post-packer parts?
    - otherwise will get failures when first set things up.

* aws CLI 2.x.
  - isn't available via pypi/pip
    - https://github.com/aws/aws-cli/issues/4947

* Automated tests.
  - https://www.terraform.io/docs/github-actions/getting-started/index.html?
  - terraform graph step commented out since terraform S3 backend needs AWS credentials
    - this might allow multiple backends?
      - https://www.monterail.com/blog/chicken-or-egg-terraforms-remote-backend
  - store terraform dependency-graph svg and link to it from README.md.

* Terraform only asks for ssh keychain password when needs it, but only gives you five minutes to supply password.
  - unlock keychain earlier.

* AWS ssh key resource prevents deployment from multiple hosts.

* Move ruby config to separate repo since not used any more.

* Wrap environment setup in scripts.

* "terraform plan" still outputs terminal control sequences if pipe stdout to less.

* EC2 improvements.
  - configuration management system, not shell script.
  - https
  - redirect http to https.
  - wait for server to start up before declaring deployment complete.
  - destroy ec2 instance only after creating new one?
    - will cost a little money.
  - periodic automated package updates.
  - terraform replaces EIP if taint ec2 server.
  - tighten up egress permissions.
  - automatic restarts on EC2 failure
    - configure autoscaling group?
      - one subnet per AZ
      - one instance max to stay within free tier
      - have to use a hack to keep same Elastic IP address when restart.
    - configure cloudwatch?
      - would lose service if AZ fails
      - IP address retained.
  - NTP
    - ntp.ubuntu.com inaccessible from the EC2 instance.
      - errors in syslog
    - amazon provide 169.254.169.123
      - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html

* EC2 cloudformation config only allows one ssh public key per instance...
  - https://stackoverflow.com/questions/24409095/create-an-ec2-instance-with-multiple-key-pairs
  - so how can you log in from multiple home directories?
    - sharing a private key is not acceptable, especially not between users.
    - using parameter means could have one instance per ssh key, but that's not useful.
    - reupload key each time change home directories?
    - generate new key each time deploy instance, throwing away as soon as have provisioned instance properly.
    - build and deploy AMI containing public keys

* Automated EC2 deployments.
  - would need to do things like this to have python and ruby in travis.
    - https://github.com/travis-ci/travis-ci/issues/4090
  - a docker-based testing platform would be more convenient.
  - generate change set on branches don't deploy from.
