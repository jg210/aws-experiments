* Packer.

* Configuration management system, not shell script.

* Automated tests.
  - commented out since terraform S3 backend needs AWS credentials
    - this might allow multiple backends?
      - https://www.monterail.com/blog/chicken-or-egg-terraforms-remote-backend
  - store terraform dependency-graph svg to S3 and link to it from README.md.
  - cache terraform download.
  - logs with timestamps.
  - travis isn't sending failure emails
    - likely since github "Keep my email address private" is enabled.

* Configure https cert.

* Terraform replaces EIP if taint ec2 server.

* Terraform only asks for ssh keychain password when needs it, but only gives you five minutes to supply password.
  - unlock keychain earlier.

* Destroy ec2 instance only after creating new one?
  - will cost a little money.

* Periodic automated package updates.

* Move ruby config to separate repo since not used any more.

* Wait for server to start up before declaring deployment complete.

* Redirect http to https.

* Automatic restarts on EC2 failure
  - configure autoscaling group?
    - one subnet per AZ
    - one instance max to stay within free tier
    - have to use a hack to keep same Elastic IP address when restart.
  - configure cloudwatch?
    - would lose service if AZ fails
    - IP address retained.

* Add link to hosted site to README.md.

* NTP
  - ntp.ubuntu.com inaccessible from the EC2 instance.
    - errors in syslog
  - amazon provide 169.254.169.123
    - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html

* EC2 cloudformation config only allows one ssh public key per instance...
  - https://stackoverflow.com/questions/24409095/create-an-ec2-instance-with-multiple-key-pairs
  - so how are you supposed to log in from multiple home directories?
    - sharing a private key is not acceptable, especially not between users.
    - using parameter means could have one instance per ssh key, but that's not useful.
    - reupload key each time change home directories?
    - generate new key each time deploy instance, throwing away as soon as have provisioned instance properly.
    - build and deploy AMI containing public keys

* Staging and production environments?

* Automated deployments.
  - would need to do things like this to have python and ruby in travis.
    - https://github.com/travis-ci/travis-ci/issues/4090
  - a docker-based testing platform would be more convenient.
  - generate change set on branches don't deploy from.

* Wrap environment setup in scripts.

* Tighten up egress permissions.

* "terraform plan" still outputs terminal control sequences if pipe stdout to less.