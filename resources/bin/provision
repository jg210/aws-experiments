#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
backtrace() {
    local err="$?"
    set +x
    printf "%s\n\n" "*********************************************************************"
    printf "ERROR: %s:%i exited with code: %s\n\n" "${BASH_SOURCE[0]}" "${BASH_LINENO[0]}" "${err}"
    printf "%s\n\n" "${BASH_COMMAND:-}"
    for (( i = 0 ; i < ${#FUNCNAME[@]} - 1 ; i++ )) ; do
        printf "%-50s  %s:%i\n" "${FUNCNAME[$i+1]}()" "${BASH_SOURCE[$i+1]}" "${BASH_LINENO[$i]}"
    done
    exit "${err}"
}
trap 'backtrace' ERR

log() {
    printf "[%s %s] %s\n" \
           "$(date '+%Y-%m-%d %H:%M:%S' --utc)" \
           "$(basename -- "$0")" \
           "$*"
}

apt_get_wrapper() {
    sudo \
	UCF_FORCE_CONFOLD=1 \
	DEBIAN_FRONTEND=noninteractive \
	apt-get \
        -o Dpkg::Options::="--force-confdef" \
        -o Dpkg::Options::="--force-confold" \
        -y \
        "$@" < /dev/null
}

export TERM=dumb

log "waiting for cloud-init to complete..."
/usr/bin/cloud-init status --wait

log "updating apt packages (to update apt sources)."
apt_get_wrapper update
log "updating apt packages again (with new apt sources)."
apt_get_wrapper update
log "installing apt packages."
apt_get_wrapper install openjdk-17-jre-headless python3-pip
log "installing: awscli"
pip3 install --upgrade --user --disable-pip-version-check awscli==1.31.12
export PATH="~/.local/bin/:${PATH}"
log "setting up spring-experiments app..."
springExperimentsDir=/opt/spring-experiments
sudo mkdir -p "${springExperimentsDir}"
jar="${springExperimentsDir}/spring-experiments.jar"
log "downloading: ${jar}"
jarTmp="/tmp/spring-experiments.jar"
aws s3 cp s3://aws-experiments/artifacts/uk/me/jeremygreen/spring-experiments/1.0/spring-experiments-1.0.jar "${jarTmp}"
sudo chown root.root "${jarTmp}"
sudo mv "${jarTmp}" "${jar}"
springExperimentsUser=spring-experiments
log "creating user: ${springExperimentsUser}"
sudo useradd "${springExperimentsUser}"
systemdUnit=/etc/systemd/system/spring-experiments.service
log "creating: ${systemdUnit}"
sudo tee "${systemdUnit}" > /dev/null <<EOF
[Unit]
Description=spring-experiments
After=syslog.target

[Service]
User=${springExperimentsUser}
ExecStart=/usr/bin/java -jar "${jar}" -Xms80m -Xmx80m

[Install]
WantedBy=multi-user.target
EOF
log "reloading systemd configuration."
sudo systemctl daemon-reload
log "enabling: spring-experiments.service"
sudo systemctl enable spring-experiments.service
log "starting: spring-experiments.service"
sudo systemctl start spring-experiments.service
log "installing: nginx"
apt_get_wrapper install nginx
log "configuring: nginx"
sudo tee /etc/nginx/sites-enabled/default > /dev/null <<EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;
    server_name _;
    location / {
        proxy_pass http://localhost:8080;
    }
}
EOF
log "restarting: nginx"
sudo service nginx restart
# TODO Wait for nginx to start.
log "done."
